AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  passless-solution

  Sample SAM Template for passless-solution

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Tracing: Active
  Api:
    TracingEnabled: true
# It's just the input will take from users, default will initiate the values
Parameters:
  Stage:
    Type: String
    Default: dev
  UserPoolName:
    Type: String
    Default: PassLessUserPool
    Description: The name you want the User Pool to be created with
  SESFromAddress:
    Type: String
    Default: niloy369@gmail.com
    Description: The e-mail address to send the secret login code from
  Tag:
    Type: "String"
    Default: aws-aurora-vpc
  DBUsername:
    Type: "String"
    Default: mahadi
  DBPassword:
    Type: "String"
    Default: Babu1995
  KmsKeyId:
    Description: KMS Key ID to use for encrypting secrets
    Type: String
    Default: 76469d22-c205-4275-b7dd-33cad075b0ce
  DbName:
    Type: String
    Default: products
# All the services and resources in our application
Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/lambdas/
      Handler: helloWorld.lambda_handler
      Runtime: python3.9
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref CognitoPlatformApi
            Path: /hello
            Method: get
  CreateUserFunc:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          UserPool: !Ref UserPool
          UserPoolClient: !Ref UserPoolClient
      CodeUri: src/lambdas/
      Handler: createUser.lambda_handler
      Runtime: python3.9
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /user/create
            RestApiId: !Ref CognitoPlatformApi
            Method: post
            Auth:
              Authorizer: NONE
      Policies:
        - Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - events:PutEvents
  PowerTollsTest:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref MyLibLayer
      Environment:
        Variables:
          DbName: !Ref DbName
          DbCluster: !GetAtt RDSCluster.DBClusterArn
          DbSecret: !Ref 'DBSecret'
      CodeUri: src/lambdas/
      Handler: powertools_test.lambda_handler
      Runtime: python3.9
      Events:
        PowerTollsTest:
          Type: Api
          Properties:
            Path: /powertools
            RestApiId: !Ref CognitoPlatformApi
            Method: get
            Auth:
              Authorizer: NONE
        PowerTollsTestName:
          Type: Api
          Properties:
            Path: /powertools/{name}
            RestApiId: !Ref CognitoPlatformApi
            Method: get
            Auth:
              Authorizer: NONE
        PowerTollsTestPost:
          Type: Api
          Properties:
            Path: /post/powertool
            RestApiId: !Ref CognitoPlatformApi
            Method: post
            Auth:
              Authorizer: NONE

  AuroraConnector:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref MyLibLayer
      Environment:
        Variables:
          DbName: !Ref DbName
          DbCluster: !GetAtt RDSCluster.DBClusterArn
          DbSecret: !Ref 'DBSecret'
      CodeUri: src/lambdas/
      Handler: auroraConnector.lambda_handler
      Runtime: python3.9
      Events:
        AuroraConnector:
          Type: Api
          Properties:
            Path: /aurora
            RestApiId: !Ref CognitoPlatformApi
            Method: get
            Auth:
              Authorizer: NONE
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                -  rds-data:ExecuteStatement
              Resource: "*"
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: "*"

  DefineAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/
      Handler: defineAuthChallenge.lambda_handler
      Runtime: python3.9

  CreateAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/
      Handler: createAuthChallenge.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          SES_FROM_ADDRESS: !Ref SESFromAddress
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
              Resource: "*"
  VerifyAuthChallengeResponse:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/
      Handler: verifyAuthChallenge.lambda_handler
      Runtime: python3.9
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminUpdateUserAttributes
              Resource: "*"
  CognitoSignIn:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          UserPool: !Ref UserPool
          UserPoolClient: !Ref UserPoolClient
      Events:
        CognitoSignIn:
          Type: Api
          Properties:
            Path: /user/signIn
            RestApiId: !Ref CognitoPlatformApi
            Method: post
            Auth:
              Authorizer: NONE
      CodeUri: src/lambdas/
      Handler: cognitoSignIn.lambda_handler
      Runtime: python3.9
  CognitoVerifySignIn:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          UserPool: !Ref UserPool
          UserPoolClient: !Ref UserPoolClient
      Events:
        CognitoVerifySignIn:
          Type: Api
          Properties:
            Path: /user/verify
            RestApiId: !Ref CognitoPlatformApi
            Method: post
            Auth:
              Authorizer: NONE
      CodeUri: src/lambdas/
      Handler: respondToAuthChallenge.lambda_handler
      Runtime: python3.9
  PreSignUp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/
      Handler: autoConfirmUser.lambda_handler
      Runtime: python3.9
  PostAuthentication:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/
      Handler: autoConfirmUser.lambda_handler
      Runtime: python3.9
      Role: !GetAtt PostAuthenticationRole.Arn
  PostAuthenticationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Ref UserPoolName
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes:
        - email
      MfaConfiguration: "OFF"
      LambdaConfig:
        CreateAuthChallenge: !GetAtt CreateAuthChallenge.Arn
        DefineAuthChallenge: !GetAtt DefineAuthChallenge.Arn
        PreSignUp: !GetAtt PreSignUp.Arn
        VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponse.Arn
        PostAuthentication: !GetAtt PostAuthentication.Arn
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: email-auth-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - CUSTOM_AUTH_FLOW_ONLY
  CognitoPlatformApi:
    Type: AWS::Serverless::Api
    DependsOn: UserPoolClient
    Properties:
      Name: !Sub "${Stage}-Cognito-Platform-Api-Gateway"
      StageName: !Ref Stage
      Auth:
        DefaultAuthorizer: CustomCognitoAuthorizer
        Authorizers:
          CustomCognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
  DefineAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DefineAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  CreateAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateAuthChallenge.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  VerifyAuthChallengeResponseInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt VerifyAuthChallengeResponse.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  PreSignUpInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUp.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  PostAuthenticationInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostAuthentication.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Fn::Join:
        - ''
        - - ApplicationInsights-SAM-
          - Ref: AWS::StackName
      AutoConfigurationEnabled: 'true'
    DependsOn: ApplicationResourceGroup

  eventBridgeTargetFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/
      Handler: eventBridgeTarget.lambda_handler
      Runtime: python3.9
      Events:
        SqsTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt SqsForEventBridge.Arn
      Environment:
        Variables:
          SES_FROM_ADDRESS: !Ref SESFromAddress
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
              Resource: "*"
  SqsForEventBridge:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: SqsForEventBridge
      Tags:
        - Key: Name
          Value: SqsForEventBridge

  eventBridgeMessagePushFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/
      Handler: eventBridgeMessagePass.lambda_handler
      Runtime: python3.9
      Policies:
        - Statement:
            - Effect: Allow
              Resource: '*'
              Action:
                - events:PutEvents
      Events:
        eventBridgeMessagePushFunc:
          Type: Api
          Properties:
            Path: /event/push
            RestApiId: !Ref CognitoPlatformApi
            Method: get
            Auth:
              Authorizer: NONE
  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule"
      EventPattern:
        source:
          - "demo.users"
        detail:
          state:
            - "created"
      State: "ENABLED"
      Targets:
        - Arn:
            Fn::GetAtt:
              - "SqsForEventBridge"
              - "Arn"
          Id: "SQSqueue"

  EventBridgeToToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: SQS:SendMessage
            Resource: !GetAtt SqsForEventBridge.Arn
      Queues:
        - Ref: SqsForEventBridge
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      Tags:
      - Key: "Name"
        Value: !Ref "Tag"

  SubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref "VPC"
      CidrBlock: "10.0.0.0/24"

  SubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref "VPC"
      CidrBlock: "10.0.1.0/24"

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"

  SubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: "subnetgroup"
      DBSubnetGroupDescription: "Subnet Group"
      SubnetIds:
      - !Ref "SubnetA"
      - !Ref "SubnetB"

  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "Example Security Group"
      GroupDescription: "RDS traffic"
      VpcId: !Ref "VPC"
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: "0.0.0.0/0"

  InstanceSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: "InstanceSecurityGroup"
    Properties:
      GroupId: !Ref "InstanceSecurityGroup"
      IpProtocol: "tcp"
      FromPort: "0"
      ToPort: "65535"
      SourceSecurityGroupId: !Ref "InstanceSecurityGroup"

  RDSCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
#      HttpEndpointEnabled: true
      DBSubnetGroupName: !Ref "SubnetGroup"
      MasterUsername: !Join [ '', [ '{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:username}}' ] ]
      MasterUserPassword: !Join [ '', [ '{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:password}}' ] ]
      DatabaseName: !Ref DbName
      Engine: "aurora"
      EngineMode: "serverless"
      VpcSecurityGroupIds:
      - !Ref "InstanceSecurityGroup"
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 16
        MinCapacity: 2
        SecondsUntilAutoPause: 300
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Username and password for database
      GenerateSecretString:
        GenerateStringKey: "password"
        PasswordLength: 20
        SecretStringTemplate: '{"username": "mahadi"}'
        ExcludePunctuation: True
      Tags:
        - Key: Name
          Value: db-secret
      Name: DBSecret

  DBSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DBSecret
      TargetId: !Ref RDSCluster
      TargetType: AWS::RDS::DBCluster
  MyLibLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/my_lib_layer
      CompatibleRuntimes:
        - python3.9
    Metadata:
      BuildMethod: python3.9
